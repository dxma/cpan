MODULE = [% module %]			PACKAGE = [% modu_package %]
PROTOTYPES: ENABLE

################################################################
####
#### NB: $type is *always* object
####
#### $item_type    : item type
#### $modu_package : package namespace
#### $type_package : item namespace
#### $root_package : universal namespace
####
################################################################

Q3PtrList<[% item_type %]> *
[% modu_package %]::new(...)
PROTOTYPE: ;$
PREINIT:
    Q3PtrList<[% item_type %]> *p;
CODE:
    /*
     * Q3PtrList<[% item_type %]>()
     * Q3PtrList<[% item_type %]>(const Q3PtrList<[% item_type %]> &list)
     */
    switch(items) {
    case 2:
        if(sv_isobject(ST(1)) && sv_derived_from(ST(1), "[% modu_package %]"))
            p = reinterpret_cast<Q3PtrList<[% item_type %]> *>(SvIV(SvRV(ST(1))));
        else
            croak("ST(1) is not of type [% modu_package %]");
        RETVAL = new Q3PtrList<[% item_type %]>(*p);
        break;
    default:
        RETVAL = new Q3PtrList<[% item_type %]>();
        // set autoDelete true by default
        RETVAL->setAutoDelete(true);
        // _PERLQT_TODO: SvREADONLY_off(RETVAL)
    }
OUTPUT:
    RETVAL

void
[% modu_package %]::DESTROY()
CODE:
    // delete that not marked with readonly
    if(!SvREADONLY(SvRV(ST(0))))
        delete THIS;

void
[% modu_package %]::append(item)
    const [% item_type %] *item
CODE:
    THIS->append(item);
    // mark item readonly
    // since its underlying object has been taken over by current list
    SvREADONLY_on(SvRV(ST(1)));

void
[% modu_package %]::at(index)
    uint index
PREINIT:
    [% item_type %] *item;
PPCODE:
    /*!
     * [% item_type %] *Q3PtrList::at(uint index)
     * int Q3PtrList::at()
    */
    switch(items) {
    case 2:
	    item = THIS->at(index);
        if (item != 0) {
	        ST(0) = sv_newmortal();
	        sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(item));
            // export only, still owned by list
	        SvREADONLY_on(SvRV(ST(0)));
        }
        else {
            ST(0) = &PL_sv_undef;
        }
        break;
    default:
        ST(0) = sv_2mortal(newSViv(THIS->at()));
    }
    XSRETURN(1);

void
[% modu_package %]::clear()
CODE:
    THIS->clear();

uint
[% modu_package %]::contains(item)
    const [% item_type %] *item
CODE:
    RETVAL = THIS->contains(item);
OUTPUT:
    RETVAL

uint
[% modu_package %]::containsRef(item)
    const [% item_type %] *item
CODE:
    RETVAL = THIS->containsRef(item);
OUTPUT:
    RETVAL

uint
[% modu_package %]::count()
CODE:
    RETVAL = THIS->count();
OUTPUT:
    RETVAL

void
[% modu_package %]::current()
PREINIT:
    [% item_type %] *item;
PPCODE:
	item = THIS->current();
    if (item != 0) {
	    ST(0) = sv_newmortal();
	    sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(item);
        // export only
	    SvREADONLY_on(SvRV(ST(0)));
    }
    else {
        ST(0) = &PL_sv_undef;
    }
	XSRETURN(1);

void
[% modu_package %]::currentNode()
PREINIT:
    Q3LNode *node;
PPCODE:
	item = THIS->currentNode();
	ST(0) = sv_newmortal();
	sv_setref_pv(ST(0), "[% root_package %]::Q3LNode", reinterpret_cast<void *>(item);
    // export only
	SvREADONLY_on(SvRV(ST(0)));
	XSRETURN(1);

int
[% modu_package %]::find(item)
    const [% item_type %] *item
CODE:
    RETVAL = THIS->find(item);
OUTPUT:
    RETVAL

int
[% modu_package %]::findNext(item)
    const [% item_type %] *item
CODE:
    RETVAL = THIS->findNext(item);
OUTPUT:
    RETVAL

int
[% modu_package %]::findNextRef(item)
    const [% item_type %] *item
CODE:
    RETVAL = THIS->findNextRef(item);
OUTPUT:
    RETVAL

int
[% modu_package %]::findRef(item)
    const [% item_type %] *item
CODE:
    RETVAL = THIS->findRef(item);
OUTPUT:
    RETVAL

void
[% modu_package %]::first()
PREINIT:
    [% item_type %] *item;
PPCODE:
	item = THIS->first();
    if (item != 0) {
	    ST(0) = sv_newmortal();
	    sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(item);
        // export only
	    SvREADONLY_on(SvRV(ST(0)));
    }
    else {
        ST(0) = &PL_sv_undef;
    }
	XSRETURN(1);

void
[% modu_package %]::getFirst()
PREINIT:
    [% item_type %] *item;
PPCODE:
	item = THIS->getFirst();
    if (item != 0) {
	    ST(0) = sv_newmortal();
	    sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(item);
        // export only
	    SvREADONLY_on(SvRV(ST(0)));
    }
    else {
        ST(0) = &PL_sv_undef;
    }
	XSRETURN(1);

void
[% modu_package %]::getLast()
PREINIT:
    [% item_type %] *item;
PPCODE:
	item = THIS->getLast();
    if (item != 0) {
	    ST(0) = sv_newmortal();
	    sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(item);
        // export only
	    SvREADONLY_on(SvRV(ST(0)));
    }
    else {
        ST(0) = &PL_sv_undef;
    }
	XSRETURN(1);

void
[% modu_package %]::inSort(item)
    const [% item_type %] *item
CODE:
    THIS->inSort(item);
    // mark readonly, owned by list now
    SvREADONLY_on(SvRV(ST(1)));

bool
[% modu_package %]::insert(index, item)
    uint index
    const [% item_type %] *item
CODE:
    RETVAL = THIS->insert(index, item);
    // mark readonly
    if(RETVAL == true)
        SvREADONLY_on(SvRV(ST(2)));
OUTPUT:
    RETVAL

bool
[% modu_package %]::isEmpty()
CODE:
    RETVAL = THIS->isEmpty();
OUTPUT:
    RETVAL

void
[% modu_package %]::last()
PREINIT:
    [% item_type %] *item;
PPCODE:
	item = THIS->last();
    if (item != 0) {
	    ST(0) = sv_newmortal();
	    sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(item);
        // export only
	    SvREADONLY_on(SvRV(ST(0)));
    }
    else {
        ST(0) = &PL_sv_undef;
    }
	XSRETURN(1);

void
[% modu_package %]::next()
PREINIT:
    [% item_type %] *item;
PPCODE:
	item = THIS->next();
    if (item != 0) {
	    ST(0) = sv_newmortal();
	    sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(item);
        // export only
	    SvREADONLY_on(SvRV(ST(0)));
    }
    else {
        ST(0) = &PL_sv_undef;
    }
	XSRETURN(1);

void
[% modu_package %]::prepend(item)
    const [% item_type %] *item
CODE:
    THIS->prepend(item);
    // mark readonly
    SvREADONLY_on(SvRV(ST(1)));

void
[% modu_package %]::prev()
PREINIT:
    [% item_type %] *item;
PPCODE:
	item = THIS->prev();
    if (item != 0) {
	    ST(0) = sv_newmortal();
	    sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(item);
        // export only
	    SvREADONLY_on(SvRV(ST(0)));
    }
    else {
        ST(0) = &PL_sv_undef;
    }
	XSRETURN(1);

bool
[% modu_package %]::remove(...)
PROTOTYPE: ;$
PREINIT:
    [% item_type %] *p;
    unsigned int i;
CODE:
    /*!
     * bool remove(uint index)
     * bool remove()
     * bool remove(const [% item_type %] * item)
    */
    switch(items) {
    case 2:
        if(sv_isobject(ST(1)) && sv_isa(ST(1), "[% type_package %]")) {
            p = reinterpret_cast<const [% item_type %] *>(SvIV(SvRV(ST(1))));
            RETVAL = THIS->remove(p);
            // no delete if auto delete enabled
            if(RETVAL == true && THIS->autoDelete())
                SvREADONLY_on(SvRV(ST(1)));
        } else if(SvIOK(ST(1))) {
            i = SvIV(ST(1));
            RETVAL = THIS->remove(i);
        } else
            croak("ST(1) is not of type [% type_package %] or integer");
        break;
    default:
        RETVAL = THIS->remove();
    }
OUTPUT:
    RETVAL

bool
[% modu_package %]::removeFirst()
CODE:
    RETVAL = THIS->removeFirst();
OUTPUT:
    RETVAL

bool
[% modu_package %]::removeLast()
CODE:
    RETVAL = THIS->removeLast();
OUTPUT:
    RETVAL

void
[% modu_package %]::removeNode(node)
    Q3LNode *node
CODE:
    THIS->removeNode(node);
    // no delete if auto delete enabled
    if (THIS->autoDelete())
	    SvREADONLY_on(SvRV(ST(1)));

bool
[% modu_package %]::removeRef(item)
    const [% item_type %] *item
CODE:
    RETVAL = THIS->removeRef(item);
    // no delete if auto delete enabled
    if(RETVAL == true && THIS->autoDelete())
        SvREADONLY_on(SvRV(ST(1)));
OUTPUT:
    RETVAL

bool
[% modu_package %]::replace(index, item)
    uint index
    const [% item_type %] *item
CODE:
    RETVAL = THIS->replace(index, item);
    // mark readonly
    if(RETVAL == true)
        SvREADONLY_on(SvRV(ST(2)));
OUTPUT:
    RETVAL

void
[% modu_package %]::sort()
CODE:
    THIS->sort();

[% item_type %] *
[% modu_package %]::take(...)
PROTOTYPE: ;$
PREINIT:
    unsigned int i;
CODE:
    /*!
     * [% item_type %] *take(uint index)
     * [% item_type %] *take()
    */
    switch(items) {
    case 2:
        if(SvIOK(ST(1))) {
            i = SvIV(ST(1));
            RETVAL = THIS->take(i);
        } else
            croak("ST(1) is not an integer");
        break;
    default:
        RETVAL = THIS->take();
    }
OUTPUT:
    RETVAL

[% item_type %] *
[% modu_package %]::takeNode(node)
    Q3LNode *node
CODE:
	RETVAL = THIS->takeNode(node);
OUTPUT:
    RETVAL

void
[% modu_package %]::toVector(vec)
    Q3GVector *vec
CODE:
    THIS->toVector(vec);

bool
[% modu_package %]::_notEquals(list)
    const Q3PtrList<[% item_type %]> *list
CODE:
    RETVAL = THIS->operator!=(*list);
OUTPUT:
    RETVAL

void
[% modu_package %]::_copy(list)
    const Q3PtrList<[% item_type %]> *list
PPCODE:
    (void)THIS->operator=(*list);
    XSRETURN(1);

bool
[% modu_package %]::_equals(list)
    const Q3PtrList<[% item_type %]> *list
CODE:
    RETVAL = THIS->operator==(*list);
OUTPUT:
    RETVAL

bool
[% modu_package %]::autoDelete()
CODE:
    RETVAL = THIS->autoDelete();
OUTPUT:
    RETVAL

uint
[% modu_package %]::count()
CODE:
    RETVAL = THIS->count();
OUTPUT:
    RETVAL

void
[% modu_package %]::setAutoDelete(enable)
    bool enable
CODE:
    THIS->setAutoDelete(enable);

# Protected member function NOT supported

################################################################
#
# SPECIAL FUNCTIONS for TIE MAGIC
#
################################################################

static void
[% modu_package %]::TIEARRAY(...)
PROTOTYPE: ;$
PREINIT:
	Q3PtrList<[% item_type %]> * list;
PPCODE:
	/*!
	 * tie @a, "[% modu_package %]"
	 * tie @a, "[% modu_package %]", $obj_to_tie
	 */
	switch(items) {
	case 2:
		if(sv_isobject(ST(1)) && sv_derived_from(ST(1), "[% modu_package %]")) {
			ST(0) = sv_2mortal(newRV_inc(SvRV(ST(1))));
		} else
			croak("ST(1) is not of type [% modu_package %]");
		break;
	default:
		/* items == 1 */
		list = new Q3PtrList<[% item_type %]>();
		ST(0) = sv_newmortal();
		sv_setref_pv(ST(0), "[% modu_package %]", reinterpret_cast<void *>(list));
	}
	XSRETURN(1);

void
[% modu_package %]::FETCH(index)
	unsigned int index
PREINIT:
    [% item_type %] *item;
PPCODE:
	if(0 <= index && index < THIS->count()) {
		ST(0) = sv_newmortal();
		item = THIS->at(index);
		sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(item));
        // export only
		SvREADONLY_on(SvRV(ST(0)));
		XSRETURN(1);
	} else
		XSRETURN_UNDEF;

void
[% modu_package %]::STORE(index, item)
	unsigned int index
	const [% item_type %] *item
CODE:
	/*
	 * insert item into specific index
	 * append to the end if index out of bound
	 */
    if( 0 <= index && index < THIS->count()) {
        // mark readonly
        if(THIS->insert(index, item))
            SvREADONLY_on(SvRV(ST(2)));
    } else {
        THIS->append(it);
        // mark readonly
        SvREADONLY_on(SvRV(ST(2)));
    }

unsigned int
[% modu_package %]::FETCHSIZE()
CODE:
	RETVAL = THIS->count();
OUTPUT:
	RETVAL

void
[% modu_package %]::STORESIZE(s)
	unsigned int s
CODE:
	/* NOOP */

void
[% modu_package %]::EXTEND(s)
	unsigned int s
CODE:
	/* NOOP */

bool
[% modu_package %]::EXISTS(key)
	unsigned int key
CODE:
	if( 0 <= key && key < THIS->count())
		RETVAL = true;
	else
		RETVAL = false;
OUTPUT:
	RETVAL

void
[% modu_package %]::DELETE(key)
	unsigned int key
CODE:
    // FIXME: croak on false remove
	if(0 <= key && key < THIS->count())
        (void)THIS->remove(key);

void
[% modu_package %]::CLEAR()
CODE:
	THIS->clear();

void
[% modu_package %]::PUSH(...)
PPCODE:
	if(items > 1) {
		/* ensure all items are of type [% item_type %] before pushing */
		for(int i = 1; i < items; i++) {
			if(!(sv_isobject(ST(i)) && sv_isa(ST(i), "[% type_package %]")))
				croak("ST(i) is not of type [% item_type %]");
		}
		for(int i = 1; i < items; i++) {
            THIS->append(INT2PTR(const [% item_type %] *, SvIV(SvRV(ST(i)))));
            // mark readonly
            SvREADONLY_on(SvRV(ST(i));
		}
		ST(0) = sv_2mortal(newSVuv(THIS->count()));
		XSRETURN(1);
	} else
		XSRETURN_UNDEF;

void
[% modu_package %]::POP()
PPCODE:
    if(!THIS->isEmpty()) {
        ST(0) = sv_newmortal();
        sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(THIS->take(THIS->count()-1)));
		XSRETURN(1);
	} else
		XSRETURN_UNDEF;

void
[% modu_package %]::SHIFT()
PPCODE:
	if(!THIS->isEmpty()) {
		ST(0) = sv_newmortal();
		sv_setref_pv(ST(0), "[% type_package %]", reinterpret_cast<void *>(THIS->take(0)));
		XSRETURN(1);
	} else
		XSRETURN_UNDEF;

void
[% modu_package %]::UNSHIFT(...)
PPCODE:
	if(items > 1) {
		/* ensure all items are of type [% item_type %] */
		for(int i = 1; i < items; i++) {
			if(!(sv_isobject(ST(i)) && sv_isa(ST(i), "[% type_package %]")))
				croak("ST(i) is not of type [% item_type %]");
		}
		for(int i = items - 1; i > 0; i--) {
			(void)THIS->append(INT2PTR(const [% item_type %] *, SvIV(SvRV(ST(i)))));
            // mark readonly
            SvREADONLY_on(SvRV(ST(i)));
		}
		ST(0) = sv_2mortal(newSVuv(THIS->count()));
		XSRETURN(1);
	} else
		XSRETURN_UNDEF;

void
[% modu_package %]::SPLICE(...)
PROTOTYPE: $;$@
PREINIT:
	unsigned int offset;
	unsigned int length;
    [% item_type %] *item;
PPCODE:
	switch(items) {
	case 2:
		// splice(offset, length=$#this-offset+1)
		if(SvIOK(ST(1)) || SvUOK(ST(1)))
			offset = SvUV(ST(1));
		else
			croak("ST(1) is not of type integer");
		length = THIS->count() - offset;
		break;
	case 3:
		// splice(offset, length)
		if(SvIOK(ST(1)) || SvUOK(ST(1)))
			offset = SvUV(ST(1));
		else
			croak("ST(1) is not of type integer");
		if(SvIOK(ST(2)) || SvUOK(ST(2)))
			length = SvUV(ST(2));
		else
			croak("ST(2) is not of type integer");
		break;
	default:
		// items > 3
		// splice(offset, length, LIST)
		if(SvIOK(ST(1)) || SvUOK(ST(1)))
			offset = SvUV(ST(1));
		else
			croak("ST(1) is not of type integer");
		if(SvIOK(ST(2)) || SvUOK(ST(2)))
			length = SvUV(ST(2));
		else
			croak("ST(2) is not of type integer");
		// (items-3) items to insert
		for(int i = 3; i < items; i++) {
			if(!(sv_isobject(ST(i)) && sv_isa(ST(i), "[% type_package %]")))
			    croak("ST(i) is not of type [% item_type %]");
		}
		for(int i = items; i > items - 3; i--) {
            THIS->insert(offset, INT2PTR(const [% item_type %] *, SvIV(SvRV(ST(i)))));
            // mark readonly
            SvREADONLY_on(SvRV(ST(i)));
		}
		offset += items - 3;
	}
	if(length > 0) {
		for(int i = 0; i < length; i++) {
			item = THIS->take(offset);
			ST(i) = sv_newmortal();
			sv_setref_pv(ST(i), "[% type_package %]", reinterpret_cast<void *>(item));
		}
		XSRETURN(length);
	} else
		XSRETURN_EMPTY;

################################################################
#
# NO UNTIE method defined
#
################################################################
