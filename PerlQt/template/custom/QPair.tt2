[% PROCESS defvar.tt2 %]
[% PROCESS header.tt2 %]

[% PROCESS typemap.tt2 %]

################################################################
#### MODULE VARS
#### 
#### $t1.type      : T1 c type name
#### $t1.package   : T1 perl package name
#### $t1.ptype     : T1 primitive type
#### $t1.is_object : T1 is object or not
#### 
#### $t2.type      : T2 c type name
#### $t2.package   : T2 perl package name
#### $t2.ptype     : T2 primitive type
#### $t2.is_object : T2 is object or not
####
################################################################

[% my_type = 'QPair<' _ t1.type _ ',' _ t2.type _ '>' %]
[% BLOCK preinit %]
    [% t1.type %] [% IF t1.is_object %]*[% END %]arg1;
    [% t2.type %] [% IF t2.is_object %]*[% END %]arg2;
[% END %]
[% BLOCK marshal_t1_in %]
  [% IF t1.is_object %]
    [% INCLUDE marshal_in 
      var   = my_var
      arg   = my_arg
      type  = t1.type
      ntype = t1.package
      ptype = 'T_PTROBJ'
    %]
  [% ELSE %]
    [% INCLUDE marshal_in 
      var   = my_var
      arg   = my_arg
      type  = t1.type
      ptype = t1.ptype
    %]
  [% END %]
[% END %]
[% BLOCK marshal_t2_in %]
  [% IF t2.is_object %]
    [% INCLUDE marshal_in 
      var   = my_var
      arg   = my_arg
      type  = t2.type
      ntype = t2.package
      ptype = 'T_PTROBJ'
    %]
  [% ELSE %]
    [% INCLUDE marshal_in 
      var   = my_var
      arg   = my_arg
      type  = t2.type
      ptype = t2.ptype
    %]
  [% END %]
[% END %]

[% my_type %] * 
[% my_package %]::new(...)
PROTOTYPE: ;$$
PREINIT:
[% PROCESS preinit %]
CODE:
    /* 
     * [% my_name %]()
     * [% my_name %](const [% t1.type %] & arg1, const [% t2.type %] & arg2)
     */
    switch(items) {
    case 3:
[% INCLUDE marshal_t1_in my_var = 'arg1' my_arg = 'ST(1)' %]
[% INCLUDE marshal_t2_in my_var = 'arg2' my_arg = 'ST(2)' %]
        RETVAL = new [% my_type %](arg1, arg2);
        break;
    case 1:
        RETVAL = new [% my_type %]();
    default:
        croak(aTHX_ "calling with wrong argument number");
OUTPUT:
    RETVAL

