[% BLOCK typemap_in2 %]
  [% SWITCH ptype %]
  [% CASE 'T_QTEXTSTREAM_QTSMFI' %]
    switch(SvIV([% arg %])) {
    case 0: //setFieldWidth
        [%+ var %] = &QTextStream::setFieldWidth;
	break;
    case 1: //setIntegerBase
        [%+ var %] = &QTextStream::setIntegerBase;
	break;
    case 2: //setRealNumberPrecision
        [%+ var %] = &QTextStream::setRealNumberPrecision;
	break;
    default:
        Perl_croak(aTHX_ "wrong QTextStream member function index passed in");
	break;
    }
  [% CASE 'T_QTEXTSTREAM_QTSMFC' %]
    switch(SvIV([% arg %])) {
    case 0: //setPadChar
        [%+ var %] = &QTextStream::setPadChar;
	break;
    default:
        Perl_croak(aTHX_ "wrong QTextStream member function index passed in");
	break;
    }
  [% CASE 'T_QFLAGS' %]
    [% var %] = [% type %](([% my_typemap_template.$type.arg0_type %])SvIV([% arg %]));
  [% CASE DEFAULT %]
    [% PERL %] warn('typemap_in2 unknown type: '. $stash->get('type'). ' '. $stash->get('ptype')) [% END %]
  [% END %]
[% END %]
[% BLOCK typemap_out2 %]
  [% SWITCH ptype %]
  [% CASE 'T_QTEXTSTREAM_QTSMFI' %]
    if([% var %] == &QTextStream::setFieldWidth) {
        sv_setiv([% arg %], 0);
    }
    else if([% var %] == &QTextStream::setIntegerBase) {
        sv_setiv([% arg %], 1);
    }
    else {
        // QTextStream::setRealNumberPrecision
        sv_setiv([% arg %], 2);
    }
  [% CASE 'T_QFLAGS' %]
    sv_setiv([% arg %], (int)[% var %]);
  [% CASE DEFAULT %]
    [% PERL %] warn('typemap_out2 unknown type: '. $stash->get('type'). ' '. $stash->get('ptype')) [% END %]
  [% END %]
[% END %]
